---
- name: Deploy Telemedicine App Infrastructure
  hosts: local
  become: false
  vars_files:
    - vault/secrets.yml
  
  tasks:
    - name: Ensure kubectl is installed
      command: which kubectl
      register: kubectl_check
      ignore_errors: true
      
    - name: Install kubectl if missing
      shell: curl -LO "https://dl.k8s.io/release/stable.txt" && curl -LO "https://dl.k8s.io/$(cat stable.txt)/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      when: kubectl_check.rc != 0

    - name: Configure kubectl with token
      shell: |
        kubectl config set-credentials jenkins --token="{{ k8s_token }}"
        kubectl config set-context jenkins --cluster=kubernetes --user=jenkins
        kubectl config use-context jenkins
      no_log: true

    - name: Create temp directory for Kubernetes configs
      file:
        path: "/tmp/telemedicine-k8s"
        state: directory
        mode: '0755'
        
    # Copy K8s manifests
    - name: Copy Kubernetes manifests
      copy:
        src: "{{ playbook_dir }}/../k8s/"
        dest: "/tmp/telemedicine-k8s/"
        mode: preserve
        
    # Create secrets for Kubernetes
    - name: Create Kubernetes secrets file
      template:
        src: "{{ playbook_dir }}/templates/secrets.yaml.j2"
        dest: "/tmp/telemedicine-k8s/secrets.yaml"
        
    # Apply secrets to Kubernetes
    - name: Apply Kubernetes secrets
      command: kubectl apply -f /tmp/telemedicine-k8s/secrets.yaml --validate=false
        
    # Make deploy.sh executable
    - name: Make deploy script executable
      file:
        path: "/tmp/telemedicine-k8s/deploy.sh"
        mode: '0755'
        
    # Execute the Kubernetes deployment
    - name: Deploy application with Kubernetes
      command: /tmp/telemedicine-k8s/deploy.sh
      args:
        chdir: "/tmp/telemedicine-k8s"
      
    # Verify deployment
    - name: Verify Kubernetes deployments
      command: kubectl get pods
      register: k8s_pods
      
    - name: Show running pods
      debug:
        var: k8s_pods.stdout_lines